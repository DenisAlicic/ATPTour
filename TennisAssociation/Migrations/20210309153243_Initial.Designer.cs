// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TennisAssociation.Models;

namespace TennisAssociation.Migrations
{
    [DbContext(typeof(TennisAssociationContext))]
    [Migration("20210309153243_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:Collation", "SQL_Latin1_General_CP1_CI_AS")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.1");

            modelBuilder.Entity("TennisAssociation.Models.Match", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id")
                        .HasDefaultValueSql("(newsequentialid())");

                    b.Property<DateTime>("Date")
                        .HasColumnType("date")
                        .HasColumnName("date");

                    b.Property<string>("FirstPlayer")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("firstPlayer");

                    b.Property<short?>("HeadToHeadFirst")
                        .HasColumnType("smallint")
                        .HasColumnName("headToHeadFirst");

                    b.Property<short?>("HeadToHeadSecond")
                        .HasColumnType("smallint")
                        .HasColumnName("headToHeadSecond");

                    b.Property<short?>("ResultFirst")
                        .HasColumnType("smallint")
                        .HasColumnName("resultFirst");

                    b.Property<short?>("ResultSecond")
                        .HasColumnType("smallint")
                        .HasColumnName("resultSecond");

                    b.Property<string>("SecondPlayer")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("secondPlayer");

                    b.Property<string>("Tournament")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("tournament");

                    b.HasKey("Id");

                    b.ToTable("matches");
                });

            modelBuilder.Entity("TennisAssociation.Models.Player", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id")
                        .HasDefaultValueSql("(newsequentialid())");

                    b.Property<short?>("BestRankingDouble")
                        .HasColumnType("smallint")
                        .HasColumnName("bestRankingDouble");

                    b.Property<short?>("BestRankingSingle")
                        .HasColumnType("smallint")
                        .HasColumnName("bestRankingSingle");

                    b.Property<DateTime?>("Birth")
                        .HasColumnType("date")
                        .HasColumnName("birth");

                    b.Property<string>("Country")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("country");

                    b.Property<short?>("CurrentRankingDouble")
                        .HasColumnType("smallint")
                        .HasColumnName("currentRankingDouble");

                    b.Property<short?>("CurrentRankingSingle")
                        .HasColumnType("smallint")
                        .HasColumnName("currentRankingSingle");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("firstName");

                    b.Property<string>("Hand")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("hand");

                    b.Property<short?>("Height")
                        .HasColumnType("smallint")
                        .HasColumnName("height");

                    b.Property<byte[]>("Img")
                        .HasColumnType("varbinary(max)")
                        .HasColumnName("img");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("lastName");

                    b.Property<string>("Sex")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("sex");

                    b.Property<short?>("Weight")
                        .HasColumnType("smallint")
                        .HasColumnName("weight");

                    b.HasKey("Id");

                    b.ToTable("players");
                });
#pragma warning restore 612, 618
        }
    }
}
